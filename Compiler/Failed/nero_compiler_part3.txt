#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>

// Deklarasi dari part1
extern unsigned char elf_header[];
extern unsigned char prog_header[];
struct Var {
  char nama[8];
  int reg;
  int dilindungi;
};
extern struct Var variabel[10];
extern int jumlah_variabel;
extern char buffer_simpan[256];
extern int panjang_buffer;
void cetak_teks(char *teks, int panjang_teks, int panjang_string, int basis_string, unsigned char *kode, int *panjang_kode, char *string);
int ambil_reg_variabel(const char *nama);

// Lanjutan main dari part2
int main(int argc, char *argv[]) {
  FILE *masukan = fopen(argv[1], "r");
  unsigned char kode[8192] = {0};
  int panjang_kode = 0;
  char string[8192] = {0};
  int panjang_string = 0;
  int basis_string = 0x400200;
  int nomor_baris = 0;
  int ada_kesalahan = 0;
  int pake_nero_ada = 0;
  int jalan_ada = 0;
  int kedalaman_blok = 0;
  int tumpukan_label[100];
  int atas_label = -1;
  int indentasi_diharapkan = 0;
  int perlambat_aktif = 0;

  char baris[256];
  fseek(masukan, 0, SEEK_SET);
  while (fgets(baris, sizeof(baris), masukan)) {
    nomor_baris++;
    baris[strcspn(baris, "\n")] = 0;
    int indentasi = 0;
    int i = 0;
    while (baris[i] == ' ') {
      indentasi++;
      i++;
    }
    if (indentasi % 2 != 0 || indentasi != indentasi_diharapkan * 2) {
      printf("Kesalahan pada baris %d: Indentasi harus %d spasi\n", nomor_baris, indentasi_diharapkan * 2);
      ada_kesalahan = 1;
      continue;
    }
    char *potong = baris + i;
    if (strlen(potong) == 0) continue;
    if (potong[0] == '*') continue;

    char *token = strtok(potong, " ");
    if (!token) {
      printf("Kesalahan pada baris %d: Baris kosong atau salah format\n", nomor_baris);
      ada_kesalahan = 1;
      continue;
    }
    char perintah[20], var[10], teks[100], jalur[100], aksi[20], teks_error[100];
    int nilai, lama, baru, tingkat, min, max;

    strcpy(perintah, token);
    if (sscanf(potong, "Rumah %s %s \"%[^\"]\" KalauBukan \"%[^\"]\"", var, aksi, teks, teks_error) == 4) {
      if (strlen(potong) != strlen("Rumah ") + strlen(var) + 1 + strlen(aksi) + 2 + strlen(teks) + strlen(" KalauBukan \"") + strlen(teks_error) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Rumah salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (strcmp(aksi, "tunjukkan") != 0) {
        printf("Kesalahan pada baris %d: Aksi Rumah tidak didukung\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xF1;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = (reg & 0x1F) | 0x80;
      kode[panjang_kode++] = 0x54;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x01;
      int posisi_label = panjang_kode - 4;
      int panjang_teks = strlen(teks) + 1;
      cetak_teks(teks, panjang_teks, panjang_string, basis_string, kode, &panjang_kode, string);
      panjang_string += panjang_teks;
      kode[panjang_kode++] = 0x14;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      int posisi_label2 = panjang_kode - 4;
      int offset = panjang_kode - posisi_label;
      kode[posisi_label + 1] = (offset >> 2) & 0xFF;
      kode[posisi_label + 2] = (offset >> 10) & 0xFF;
      panjang_teks = strlen(teks_error) + 1;
      cetak_teks(teks_error, panjang_teks, panjang_string, basis_string, kode, &panjang_kode, string);
      panjang_string += panjang_teks;
      offset = panjang_kode - posisi_label2;
      kode[posisi_label2 + 1] = (offset >> 2) & 0xFF;
      kode[posisi_label2 + 2] = (offset >> 10) & 0xFF;
    }
    else if (sscanf(potong, "Prioritas %s %d", var, &tingkat) == 2) {
      if (strlen(potong) != strlen("Prioritas ") + strlen(var) + 1 + (tingkat >= 0 ? (int)log10(tingkat ? tingkat : 1) + 1 : 1)) {
        printf("Kesalahan pada baris %d: Sintaksis Prioritas salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (tingkat < 1 || tingkat > 3) {
        printf("Kesalahan pada baris %d: Tingkat prioritas harus 1, 2, atau 3\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (tingkat == 3 ? 0 : reg) >> 16 & 0xFF;
      kode[panjang_kode++] = (tingkat == 3 ? 0 : reg) >> 8 & 0xFF;
      kode[panjang_kode++] = (tingkat == 3 ? 0 : reg);
    }
    else if (sscanf(potong, "Ganti %s %d %d", var, &lama, &baru) == 3) {
      if (strlen(potong) != strlen("Ganti ") + strlen(var) + 1 + (lama >= 0 ? (int)log10(lama ? lama : 1) + 1 : 1) + 1 + (baru >= 0 ? (int)log10(baru ? baru : 1) + 1 : 1)) {
        printf("Kesalahan pada baris %d: Sintaksis Ganti salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xF1;
      kode[panjang_kode++] = (lama >> 16) & 0xFF;
      kode[panjang_kode++] = (lama >> 8) & 0xFF;
      kode[panjang_kode++] = (reg & 0x1F) | 0x80;
      kode[panjang_kode++] = 0x54;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x01;
      int posisi_label = panjang_kode - 4;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (baru >> 16) & 0xFF;
      kode[panjang_kode++] = (baru >> 8) & 0xFF;
      kode[panjang_kode++] = (reg & 0x1F) | ((baru & 0xFF) << 5);
      int offset = panjang_kode - posisi_label;
      kode[posisi_label + 1] = (offset >> 2) & 0xFF;
      kode[posisi_label + 2] = (offset >> 10) & 0xFF;
    }
    else if (sscanf(potong, "Hilangkan %s", var) == 1) {
      if (strlen(potong) != strlen("Hilangkan ") + strlen(var)) {
        printf("Kesalahan pada baris %d: Sintaksis Hilangkan salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (variabel[reg].dilindungi) {
        printf("Kesalahan pada baris %d: Variabel dilindungi oleh Pertahankan\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = (reg & 0x1F);
    }
    else if (strcmp(perintah, "Istirahat") == 0 && strcmp(potong, "Istirahat") == 0) {
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
    }
    else if (sscanf(potong, "Paksa \"%[^\"]\"", jalur) == 1) {
      if (strlen(potong) != strlen("Paksa \"") + strlen(jalur) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Paksa salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x02;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xFF;
      kode[panjang_kode++] = 0x02;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    else if (sscanf(potong, "Simpan \"%[^\"]\" %s", teks, var) == 2 || sscanf(potong, "Simpan \"%[^\"]\"", teks) == 1) {
      if (strlen(potong) != strlen("Simpan \"") + strlen(teks) + (var[0] ? strlen(var) + 3 : 2)) {
        printf("Kesalahan pada baris %d: Sintaksis Simpan salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(teks) + 1;
      if (panjang_buffer + panjang_teks < 256) {
        memcpy(buffer_simpan + panjang_buffer, teks, panjang_teks);
        panjang_buffer += panjang_teks;
      }
      if (var[0]) {
        int reg = ambil_reg_variabel(var);
        if (reg < 0) {
          printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
          ada_kesalahan = 1;
          continue;
        }
        char teks_angka[16];
        snprintf(teks_angka, sizeof(teks_angka), "%d", reg);
        panjang_teks = strlen(teks_angka) + 1;
        if (panjang_buffer + panjang_teks < 256) {
          memcpy(buffer_simpan + panjang_buffer, teks_angka, panjang_teks);
          panjang_buffer += panjang_teks;
        }
      }
    }
    else if (sscanf(potong, "Simpan \"%[^\"]\" %s", jalur, var) == 2) {
      if (strlen(potong) != strlen("Simpan \"") + strlen(jalur) + strlen("\" ") + strlen(var)) {
        printf("Kesalahan pada baris %d: Sintaksis Simpan ke file salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (reg >> 16) & 0xFF;
      kode[panjang_kode++] = (reg >> 8) & 0xFF;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    else if (sscanf(potong, "Baca \"%[^\"]\" %s", jalur, var) == 2) {
      if (strlen(potong) != strlen("Baca \"") + strlen(jalur) + strlen("\" ") + strlen(var)) {
        printf("Kesalahan pada baris %d: Sintaksis Baca salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (reg >> 16) & 0xFF;
      kode[panjang_kode++] = (reg >> 8) & 0xFF;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    else if (strcmp(perintah, "Eksekusi") == 0 && strcmp(potong, "Eksekusi") == 0) {
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      cetak_teks(buffer_simpan, panjang_buffer + 1, panjang_string, basis_string, kode, &panjang_kode, string);
      panjang_string += panjang_buffer + 1;
      panjang_buffer = 0;
      memset(buffer_simpan, 0, 256);
    }
    else if (sscanf(potong, "Perlambat %d", &nilai) == 1) {
      if (strlen(potong) != strlen("Perlambat ") + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
        printf("Kesalahan pada baris %d: Sintaksis Perlambat salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      perlambat_aktif = nilai;
    }
    else if (strcmp(perintah, "Selalu") == 0 && strcmp(potong, "Selalu") == 0) {
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      tumpukan_label[++atas_label] = panjang_kode;
      kedalaman_blok++;
      indentasi_diharapkan++;
    }
    else if (sscanf(potong, "Pertahankan %s", var) == 1) {
      if (strlen(potong) != strlen("Pertahankan ") + strlen(var)) {
        printf("Kesalahan pada baris %d: Sintaksis Pertahankan salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      variabel[reg].dilindungi = 1;
    }
    else if (sscanf(potong, "Acak %s %d %d", var, &min, &max) == 3) {
      if (strlen(potong) != strlen("Acak ") + strlen(var) + 1 + (min >= 0 ? (int)log10(min ? min : 1) + 1 : 1) + 1 + (max >= 0 ? (int)log10(max ? max : 1) + 1 : 1)) {
        printf("Kesalahan pada baris %d: Sintaksis Acak salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int reg = ambil_reg_variabel(var);
      if (reg < 0) {
        printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (min > max) {
        printf("Kesalahan pada baris %d: Min harus lebih kecil dari max\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (min >> 16) & 0xFF;
      kode[panjang_kode++] = (min >> 8) & 0xFF;
      kode[panjang_kode++] = (reg & 0x1F);
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = ((max - min + 1) >> 16) & 0xFF;
      kode[panjang_kode++] = ((max - min + 1) >> 8) & 0xFF;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
    }
    else if (strcmp(perintah, "Selesai") == 0 && strcmp(potong, "Selesai") == 0) {
      if (kedalaman_blok == 0) {
        printf("Kesalahan pada baris %d: Selesai tanpa blok\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      int offset = panjang_kode - tumpukan_label[atas_label];
      kode[tumpukan_label[atas_label] + 1] = (offset >> 2) & 0xFF;
      kode[tumpukan_label[atas_label] + 2] = (offset >> 10) & 0xFF;
      atas_label--;
      kedalaman_blok--;
      indentasi_diharapkan--;
    }
    else if (strcmp(perintah, "Berhenti") == 0 && strcmp(potong, "Berhenti") == 0) {
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
    }
    else if (strcmp(perintah, "(Jalan)") == 0 && strcmp(potong, "(Jalan)") == 0) {
      jalan_ada = 1;
    }
    else {
      printf("Kesalahan pada baris %d: Perintah tidak dikenali\n", nomor_baris);
      ada_kesalahan = 1;
      continue;
    }
  }

  fclose(masukan);

  if (!pake_nero_ada) {
    printf("Kesalahan: 'Pake Nero' tidak ditemukan\n");
    return 1;
  }
  if (!jalan_ada) {
    printf("Kesalahan: '(Jalan)' tidak ditemukan\n");
    return 1;
  }
  if (ada_kesalahan) {
    printf("Kompilasi dibatalkan karena ada kesalahan\n");
    return 1;
  }
  if (kedalaman_blok != 0) {
    printf("Kesalahan: Blok tidak ditutup dengan benar\n");
    return 1;
  }

  // Tulis file keluaran
  FILE *keluaran = fopen("a.out", "wb");
  if (!keluaran) {
    printf("Kesalahan: Tidak bisa buat file keluaran\n");
    return 1;
  }
  fwrite(elf_header, 1, sizeof(elf_header), keluaran);
  fwrite(prog_header, 1, sizeof(prog_header), keluaran);
  fwrite(kode, 1, panjang_kode, keluaran);
  fwrite(string, 1, panjang_string, keluaran);
  fclose(keluaran);
  chmod("a.out", 0755);
  return 0;
}