#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>

// Deklarasi dari part1
extern unsigned char elf_header[];
extern unsigned char prog_header[];
struct Var {
  char nama[8];
  int reg;
  int dilindungi;
};
extern struct Var variabel[10];
extern int jumlah_variabel;
extern char buffer_simpan[256];
extern int panjang_buffer;
void cetak_teks(char *teks, int panjang_teks, int panjang_string, int basis_string, unsigned char *kode, int *panjang_kode, char *string);
int ambil_reg_variabel(const char *nama);

// Lanjutan main dari part1
int main(int argc, char *argv[]) {
  FILE *masukan = fopen(argv[1], "r");
  unsigned char kode[8192] = {0};
  int panjang_kode = 0;
  char string[8192] = {0};
  int panjang_string = 0;
  int basis_string = 0x400200;
  int nomor_baris = 0;
  int ada_kesalahan = 0;
  int pake_nero_ada = 0;
  int jalan_ada = 0;
  int kedalaman_blok = 0;
  int tumpukan_label[100];
  int atas_label = -1;
  int indentasi_diharapkan = 0;
  int perlambat_aktif = 0;

  char baris[256];
  fseek(masukan, 0, SEEK_SET);
  while (fgets(baris, sizeof(baris), masukan)) {
    nomor_baris++;
    baris[strcspn(baris, "\n")] = 0;
    int indentasi = 0;
    int i = 0;
    while (baris[i] == ' ') {
      indentasi++;
      i++;
    }
    if (indentasi % 2 != 0 || indentasi != indentasi_diharapkan * 2) {
      printf("Kesalahan pada baris %d: Indentasi harus %d spasi\n", nomor_baris, indentasi_diharapkan * 2);
      ada_kesalahan = 1;
      continue;
    }
    char *potong = baris + i;
    if (strlen(potong) == 0) continue;
    if (potong[0] == '*') continue;

    char *token = strtok(potong, " ");
    if (!token) {
      printf("Kesalahan pada baris %d: Baris kosong atau salah format\n", nomor_baris);
      ada_kesalahan = 1;
      continue;
    }
    char perintah[20], var[10], teks[100], unit[10], jalur[100];
    int nilai, nilai2, awal, akhir;

    strcpy(perintah, token);
    if (sscanf(potong, "Tunggu %d", &nilai) == 1) {
      if (strlen(potong) != strlen("Tunggu ") + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
        printf("Kesalahan pada baris %d: Sintaksis Tunggu salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (nilai >> 16) & 0xFF;
      kode[panjang_kode++] = (nilai >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
    }
    else if (sscanf(potong, "Tunggu %d waktuhabis %d %s", &nilai, &nilai2, unit) == 3) {
      if (strlen(potong) != strlen("Tunggu ") + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1) + strlen(" waktuhabis ") + (nilai2 >= 0 ? (int)log10(nilai2 ? nilai2 : 1) + 1 : 1) + 1 + strlen(unit)) {
        printf("Kesalahan pada baris %d: Sintaksis Tunggu waktuhabis salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (strcmp(unit, "detik") != 0 && strcmp(unit, "menit") != 0) {
        printf("Kesalahan pada baris %d: Unit harus detik atau menit\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      int detik = nilai2 * (strcmp(unit, "menit") == 0 ? 60 : 1);
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (detik >> 16) & 0xFF;
      kode[panjang_kode++] = (detik >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
    }
    else if (strcmp(perintah, "Tunggusambilkerjalain") == 0 && strcmp(potong, "Tunggusambilkerjalain") == 0) {
      char *teks = "Kerja sambil nunggu\n";
      int panjang_teks = strlen(teks) + 1;
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      cetak_teks(teks, panjang_teks, panjang_string, basis_string, kode, &panjang_kode, string);
      panjang_string += panjang_teks;
    }
    else if (sscanf(potong, "Urutkan dari %d ke %d", &awal, &akhir) == 2) {
      if (strlen(potong) != strlen("Urutkan dari ") + (awal >= 0 ? (int)log10(awal ? awal : 1) + 1 : 1) + strlen(" ke ") + (akhir >= 0 ? (int)log10(akhir ? akhir : 1) + 1 : 1)) {
        printf("Kesalahan pada baris %d: Sintaksis Urutkan salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (awal > akhir) {
        printf("Kesalahan pada baris %d: Awal harus lebih kecil dari akhir\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (awal >> 16) & 0xFF;
      kode[panjang_kode++] = (awal >> 8) & 0xFF;
      kode[panjang_kode++] = 0x09;
      int mulai_loop = panjang_kode;
      kode[panjang_kode++] = 0xF1;
      kode[panjang_kode++] = (akhir >> 16) & 0xFF;
      kode[panjang_kode++] = (akhir >> 8) & 0xFF;
      kode[panjang_kode++] = 0x89 | 0x80;
      kode[panjang_kode++] = 0x54;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x01;
      int posisi_label = panjang_kode - 4;
      char teks_angka[16];
      snprintf(teks_angka, sizeof(teks_angka), "%d\n", awal);
      int panjang_teks = strlen(teks_angka) + 1;
      cetak_teks(teks_angka, panjang_teks, panjang_string, basis_string, kode, &panjang_kode, string);
      panjang_string += panjang_teks;
      kode[panjang_kode++] = 0x91;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0x09 | (0x09 << 5);
      kode[panjang_kode++] = 0x14;
      kode[panjang_kode++] = ((mulai_loop - panjang_kode - 4) >> 2) & 0xFF;
      kode[panjang_kode++] = ((mulai_loop - panjang_kode - 4) >> 10) & 0xFF;
      kode[panjang_kode++] = 0x00;
      int offset = panjang_kode - posisi_label;
      kode[posisi_label + 1] = (offset >> 2) & 0xFF;
      kode[posisi_label + 2] = (offset >> 10) & 0xFF;
    }
    else if (sscanf(potong, "Kosong \"%[^\"]\"", teks) == 1) {
      if (strlen(potong) != strlen("Kosong \"") + strlen(teks) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Kosong salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (strlen(teks) == 0 ? 1 : 0) >> 16 & 0xFF;
      kode[panjang_kode++] = (strlen(teks) == 0 ? 1 : 0) >> 8 & 0xFF;
      kode[panjang_kode++] = 0x09;
    }
    else if (sscanf(potong, "Lihat \"%[^\"]\"", jalur) == 1) {
      if (strlen(potong) != strlen("Lihat \"") + strlen(jalur) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Lihat salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x09;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    else if (sscanf(potong, "Buatfolder \"%[^\"]\"", jalur) == 1) {
      if (strlen(potong) != strlen("Buatfolder \"") + strlen(jalur) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Buatfolder salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xFF;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    else if (sscanf(potong, "Buatfile \"%[^\"]\"", jalur) == 1) {
      if (strlen(potong) != strlen("Buatfile \"") + strlen(jalur) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Buatfile salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x02;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x01;
      kode[panjang_kode++] = 0xFF;
      kode[panjang_kode++] = 0x02;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    else if (sscanf(potong, "Hapus \"%[^\"]\"", jalur) == 1) {
      if (strlen(potong) != strlen("Hapus \"") + strlen(jalur) + strlen("\"")) {
        printf("Kesalahan pada baris %d: Sintaksis Hapus salah atau spasi invalid\n", nomor_baris);
        ada_kesalahan = 1;
        continue;
      }
      int panjang_teks = strlen(jalur) + 1;
      int offset_string = basis_string + panjang_string;
      memcpy(string + panjang_string, jalur, panjang_teks);
      if (perlambat_aktif) {
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
        kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
        kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
      }
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = (offset_string >> 16) & 0xFF;
      kode[panjang_kode++] = (offset_string >> 8) & 0xFF;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0xD2;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x08;
      kode[panjang_kode++] = 0xD4;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      kode[panjang_kode++] = 0x00;
      panjang_string += panjang_teks;
    }
    // Lanjutan parsing di nero_compiler_part3.c
  }
  // Lanjutan main di nero_compiler_part3.c
}