#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>

// ELF header untuk AArch64
unsigned char elf_header[] = {
    0x7F, 0x45, 0x4C, 0x46, 0x02, 0x01, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0xB7, 0x00,
    0x01, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x40, 0x00,
    0x38, 0x00,
    0x01, 0x00,
    0x00, 0x00,
    0x00, 0x00,
    0x00, 0x00
};

// Program header
unsigned char prog_header[] = {
    0x01, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Struktur variabel
struct Var {
    char nama[8];
    int reg;
    int dilindungi; // Untuk Pertahankan
} variabel[10] = {0};
int jumlah_variabel = 0;

// Buffer sementara untuk Simpan
char buffer_simpan[256] = {0};
int panjang_buffer = 0;

// Ambil register untuk variabel
int ambil_reg_variabel(const char *nama) {
    for (int i = 0; i < jumlah_variabel; i++) {
        if (strcmp(variabel[i].nama, nama) == 0) return variabel[i].reg;
    }
    if (jumlah_variabel < 10) {
        strncpy(variabel[jumlah_variabel].nama, nama, 7);
        variabel[jumlah_variabel].nama[7] = '\0';
        variabel[jumlah_variabel].reg = jumlah_variabel;
        variabel[jumlah_variabel].dilindungi = 0;
        return jumlah_variabel++;
    }
    return -1;
}

// Cetak teks ke kode AArch64
void cetak_teks(char *teks, int panjang_teks, int panjang_string, int basis_string, unsigned char *kode, int *panjang_kode, char *string) {
    int offset_string = basis_string + panjang_string;
    memcpy(string + panjang_string, teks, panjang_teks);
    
    kode[(*panjang_kode)++] = 0xD2; kode[(*panjang_kode)++] = 0x00;
    kode[(*panjang_kode)++] = 0x00; kode[(*panjang_kode)++] = 0x01;
    kode[(*panjang_kode)++] = 0xD2; kode[(*panjang_kode)++] = (offset_string >> 16) & 0xFF;
    kode[(*panjang_kode)++] = (offset_string >> 8) & 0xFF; kode[(*panjang_kode)++] = 0x01;
    kode[(*panjang_kode)++] = 0xD2; kode[(*panjang_kode)++] = (panjang_teks >> 16) & 0xFF;
    kode[(*panjang_kode)++] = (panjang_teks >> 8) & 0xFF; kode[(*panjang_kode)++] = 0x02;
    kode[(*panjang_kode)++] = 0xD2; kode[(*panjang_kode)++] = 0x00;
    kode[(*panjang_kode)++] = 0x02; kode[(*panjang_kode)++] = 0x08;
    kode[(*panjang_kode)++] = 0xD4; kode[(*panjang_kode)++] = 0x00;
    kode[(*panjang_kode)++] = 0x00; kode[(*panjang_kode)++] = 0x00;
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Cara pakai: %s <file.nero>\n", argv[0]);
        return 1;
    }

    FILE *masukan = fopen(argv[1], "r");
    if (!masukan) {
        printf("Kesalahan: Tidak bisa buka file %s\n", argv[1]);
        return 1;
    }

    unsigned char kode[8192] = {0};
    int panjang_kode = 0;
    char string[8192] = {0};
    int panjang_string = 0;
    int basis_string = 0x400200;
    int nomor_baris = 0;
    int ada_kesalahan = 0;
    int pake_nero_ada = 0;
    int jalan_ada = 0;
    int kedalaman_blok = 0;
    int tumpukan_label[100];
    int atas_label = -1;
    int indentasi_diharapkan = 0;
    int perlambat_aktif = 0;

    char baris[256];
    while (fgets(baris, sizeof(baris), masukan)) {
        nomor_baris++;
        baris[strcspn(baris, "\n")] = 0;

        // Cek indentasi
        int indentasi = 0;
        int i = 0;
        while (baris[i] == ' ') {
            indentasi++;
            i++;
        }
        if (indentasi % 2 != 0 || indentasi != indentasi_diharapkan * 2) {
            printf("Kesalahan pada baris %d: Indentasi harus %d spasi\n", nomor_baris, indentasi_diharapkan * 2);
            ada_kesalahan = 1;
            continue;
        }
        char *potong = baris + i;
        if (strlen(potong) == 0) continue;
        if (potong[0] == '*') continue; // Komen

        // Cek spasi antar token
        char *token = strtok(potong, " ");
        if (!token) {
            printf("Kesalahan pada baris %d: Baris kosong atau salah format\n", nomor_baris);
            ada_kesalahan = 1;
            continue;
        }
        char perintah[20], var[10], teks[100], unit[10], jalur[100], aksi[20], teks_error[100];
        int nilai, nilai2, awal, akhir, lama, baru, tingkat;

        strcpy(perintah, token);
        if (strcmp(perintah, "Pake") == 0 && strcmp(potong, "Pake Nero") == 0) {
            if (nomor_baris != 1) {
                printf("Kesalahan pada baris %d: 'Pake Nero' harus di baris pertama\n", nomor_baris);
                ada_kesalahan = 1;
            }
            pake_nero_ada = 1;
            indentasi_diharapkan = 0;
        }
        else if (strcmp(perintah, "(Jalan)") == 0 && strcmp(potong, "(Jalan)") == 0) {
            if (indentasi != 0) {
                printf("Kesalahan pada baris %d: '(Jalan)' tidak boleh diindentasi\n", nomor_baris);
                ada_kesalahan = 1;
            }
            jalan_ada = 1;
        }
        else if (sscanf(potong, "Atur %s %d", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Atur ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Atur salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Terlalu banyak variabel\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0xD2;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | ((nilai & 0xFF) << 5);
        }
        else if (sscanf(potong, "Tambah %s %d", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Tambah ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Tambah salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0x91;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | ((reg & 0x1F) << 5);
        }
        else if (sscanf(potong, "Kurang %s %d", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Kurang ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Kurang salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0xD1;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | ((reg & 0x1F) << 5);
        }
        else if (sscanf(potong, "Kali %s %d", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Kali ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Kali salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0x9B;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | ((reg & 0x1F) << 5);
        }
        else if (sscanf(potong, "Bagi %s %d", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Bagi ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Bagi salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (nilai == 0) {
                printf("Kesalahan pada baris %d: Pembagian dengan nol\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0x9A;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | ((reg & 0x1F) << 5);
        }
        else if (sscanf(potong, "Tunjukkan \"%[^\"]\" %s", teks, var) == 2 || sscanf(potong, "Tunjukkan \"%[^\"]\"", teks) == 1) {
            if (strlen(potong) != strlen("Tunjukkan \"") + strlen(teks) + (var[0] ? strlen(var) + 3 : 2)) {
                printf("Kesalahan pada baris %d: Sintaksis Tunjukkan salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int panjang_teks = strlen(teks) + 1;
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            cetak_teks(teks, panjang_teks, panjang_string, basis_string, kode, &panjang_kode, string);
            panjang_string += panjang_teks;

            if (var[0]) {
                int reg = ambil_reg_variabel(var);
                if (reg < 0) {
                    printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                    ada_kesalahan = 1;
                    continue;
                }
                char teks_angka[16];
                snprintf(teks_angka, sizeof(teks_angka), "%d", reg);
                panjang_teks = strlen(teks_angka) + 1;
                cetak_teks(teks_angka, panjang_teks, panjang_string, basis_string, kode, &panjang_kode, string);
                panjang_string += panjang_teks;
            }
        }
        else if (sscanf(potong, "Kalau %s %d Maka", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Kalau ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1) + strlen(" Maka")) {
                printf("Kesalahan pada baris %d: Sintaksis Kalau salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0xF1;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | 0x80;
            kode[panjang_kode++] = 0x54;
            kode[panjang_kode++] = 0x00;
            kode[panjang_kode++] = 0x00;
            kode[panjang_kode++] = 0x01;
            tumpukan_label[++atas_label] = panjang_kode - 4;
            kedalaman_blok++;
            indentasi_diharapkan++;
        }
        else if (strcmp(perintah, "KalauBukan") == 0 && strcmp(potong, "KalauBukan") == 0) {
            if (kedalaman_blok == 0 || tumpukan_label[atas_label] == -1) {
                printf("Kesalahan pada baris %d: KalauBukan tanpa Kalau\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0x14;
            kode[panjang_kode++] = 0x00;
            kode[panjang_kode++] = 0x00;
            kode[panjang_kode++] = 0x00;
            int offset = panjang_kode - tumpukan_label[atas_label];
            kode[tumpukan_label[atas_label] + 1] = (offset >> 2) & 0xFF;
            kode[tumpukan_label[atas_label] + 2] = (offset >> 10) & 0xFF;
            tumpukan_label[atas_label] = panjang_kode - 4;
        }
        else if (sscanf(potong, "Ulangi %d", &nilai) == 2) {
            if (strlen(potong) != strlen("Ulangi ") + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Ulangi salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (nilai < 1) {
                printf("Kesalahan pada baris %d: Jumlah ulangan harus positif\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0xD2;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = 0x09;
            kode[panjang_kode++] = 0xCB;
            kode[panjang_kode++] = 0x09;
            kode[panjang_kode++] = 0x00;
            kode[panjang_kode++] = 0x09;
            kode[panjang_kode++] = 0xB5;
            kode[panjang_kode++] = 0xFF;
            kode[panjang_kode++] = 0xFF;
            kode[panjang_kode++] = 0x09;
            tumpukan_label[++atas_label] = panjang_kode - 4;
            kedalaman_blok++;
            indentasi_diharapkan++;
        }
        else if (sscanf(potong, "Sampai %s %d", var, &nilai) == 2) {
            if (strlen(potong) != strlen("Sampai ") + strlen(var) + 1 + (nilai >= 0 ? (int)log10(nilai ? nilai : 1) + 1 : 1)) {
                printf("Kesalahan pada baris %d: Sintaksis Sampai salah atau spasi invalid\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            int reg = ambil_reg_variabel(var);
            if (reg < 0) {
                printf("Kesalahan pada baris %d: Variabel tidak dikenali\n", nomor_baris);
                ada_kesalahan = 1;
                continue;
            }
            if (perlambat_aktif) {
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0xD2; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x08;
                kode[panjang_kode++] = 0xD4; kode[panjang_kode++] = 0x00;
                kode[panjang_kode++] = 0x00; kode[panjang_kode++] = 0x00;
            }
            kode[panjang_kode++] = 0xF1;
            kode[panjang_kode++] = (nilai >> 16) & 0xFF;
            kode[panjang_kode++] = (nilai >> 8) & 0xFF;
            kode[panjang_kode++] = (reg & 0x1F) | 0x80;
            kode[panjang_kode++] = 0x54;
            kode[panjang_kode++] = 0xFF;
            kode[panjang_kode++] = 0xFF;
            kode[panjang_kode++] = 0x00;
            tumpukan_label[++atas_label] = panjang_kode - 4;
            kedalaman_blok++;
            indentasi_diharapkan++;
        }
        // Lanjutan parsing di nero_compiler_part2.c
    }
    // Lanjutan main di nero_compiler_part2.c
}